import ejiayou.composing.builds.Testing
import ejiayou.composing.builds.ThirdLib
import ejiayou.composing.builds.AndroidX

plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'maven-publish'
    id 'ejiayou.composing.builds'
    id 'kotlin-android-extensions'
//    id 'kotlin-parcelize'
    id 'kotlin-kapt'
}
//kotlin 配置
kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}
android {
    compileSdk 30

    defaultConfig {
        minSdk 21
        targetSdk 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
        //java 配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }

    }
    sourceSets {
        main {
            if (isModuleType == "lib") {
                println("isModuleType - lib")
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            } else {
                println("isModuleType - app")
                manifest.srcFile 'src/main/AndroidManifest.xml'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    packagingOptions { exclude 'META-INF/rxjava.properties' }
    //设置了resourcePrefix值后，所有的资源名必须以指定的字符串做前缀，否则会报错。
    //但是resourcePrefix这个值只能限定xml里面的资源，并不能限定图片资源，所有图片资源仍然需要手动去修改资源名。
    resourcePrefix "station_"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        dataBinding true
    }
}
dependencies {
    testImplementation Testing.jUnit
    androidTestImplementation Testing.androidJunit
    androidTestImplementation Testing.espresso
    //每个module必须引用 ARouter
    kapt ThirdLib.Arouter.arouterCompiler
    api 'com.github.nearbyren:ensd-common:v1.2.8'
    implementation project(path: ':station-export')


}

task sourceJar(type: Jar) {
    from android.sourceSets.main.java.getSrcDirs() // 源码路径
    archiveClassifier = "sources"
}

afterEvaluate {
    publishing {
        repositories { RepositoryHandler handler ->
            handler.mavenLocal()
            handler.maven {
                url "${rootDir}/repo"
            }
            // 仓库用户名密码
            // handler.maven { MavenArtifactRepository mavenArtifactRepository ->
            //     // maven 仓库地址
            //     url 'http://xx.xxx.xx.xx:8081/repository/core/'
            //     // 访问仓库的 账号和密码
            //     credentials {
            //         username = "xxx"
            //         password = "123456"
            //     }
            // }
        }

        publications {

            // Creates a Maven publication called "release".
            release(MavenPublication) {

                // Applies the component for the release build variant.
                from components.release
                artifact sourceJar // 上传源码
                // Library Package Name (Example : "com.xxx.lib")
                // NOTE : Different GroupId For Each Library / Module, So That Each Library Is Not Overwritten
                groupId = 'ejiayou.station.module'

                // Library Name / Module Name (Example : "androidfirstlib")
                // NOTE : Different ArtifactId For Each Library / Module, So That Each Library Is Not Overwritten
                artifactId = 'module'

                // Version Library Name (Example : "1.0.0")
                version = '1.0.0'

                //指定路径 share_export-release.aar
//                artifact "build/outputs/aar/${project.getName()}-release.aar"
            }
        }
    }
}